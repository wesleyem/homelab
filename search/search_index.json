{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>For upstream project visit <code>github/wesleyem/homelab</code>.</p> <ul> <li>the repo contains all the documentation and source code</li> <li>here you will find notes integrated with the salient parts of my homelab</li> </ul>"},{"location":"automation/","title":"Automation","text":"<p>Small collection of automation used in my home network</p> <ul> <li><code>cloudflare-update</code> - Update DNS Record</li> </ul>"},{"location":"automation/ddns/","title":"Custom Cloudflare DNS Update","text":"<ul> <li>Workflow runs every 30 min via self-hosted github runner, octorunner</li> <li>GitHub secrets passed through the workflow to the script via environment vars</li> <li>environment vars configured in github</li> <li>secrets held in 1Password and used in GitHub Actions</li> <li>API Token NOT API Key is used to initialize the client in the script</li> <li>Token permissions: <code>All zones - DNS:Read, DNS:Edit</code></li> </ul> Workflow<pre><code>name: Monitor IP and Update Cloudflare\n\non:\n  schedule:\n    # Run the workflow every 30 minutes\n    - cron: \"*/30 * * * *\"\n  workflow_dispatch:\n\njobs:\n  monitor-ip:\n    runs-on: self-hosted\n\n    steps:\n      # Checkout the repository\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # Set up Python\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.x\"\n\n      # Install dependencies\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install python-dotenv requests cloudflare\n\n      # Run the script\n      - name: Run monitor script\n        env:\n          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          CLOUDFLARE_API_EMAIL: ${{ secrets.CLOUDFLARE_API_EMAIL }}\n          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n          CLOUDFLARE_DNS_RECORD_ID: ${{ secrets.CLOUDFLARE_DNS_RECORD_ID }}\n        run: |\n          python automation/ddns/cloudflare-update.py\n</code></pre> Script<pre><code>import sys\nimport requests\nfrom cloudflare import Cloudflare\nimport os\nfrom dotenv import load_dotenv\n\n\n\ndef get_public_ip():\n    \"\"\"Fetch the public IP address.\"\"\"\n    try:\n        response = requests.get(\"https://api.ipify.org\", timeout=10)\n        response.raise_for_status()\n        return response.text\n    except requests.RequestException as e:\n        print(f\"Error fetching public IP: {e}\")\n        sys.exit(1)\n\ndef update_cloudflare_record(ip, api_token, zone_id, dns_record_id):\n    \"\"\"Monitor IP changes and edit Cloudflare.\"\"\"\n    client = Cloudflare(\n        api_token=api_token\n    )\n    \"\"\"Edit the Cloudflare DNS record.\"\"\"\n    try:\n        # Edit the DNS record\n        response = client.dns.records.edit(\n            dns_record_id=dns_record_id,\n            zone_id=zone_id,\n            content=ip\n        )\n        print(f\"Successfully updated DNS record to IP\")\n    except Exception as e:\n        print(f\"Error editing Cloudflare DNS record: {e}\")\n        sys.exit(1)\n\ndef main():\n    # Check for a flag to determine how to load environment variables\n    if len(sys.argv) &gt; 1 and sys.argv[1] == \"--use-env-file\":\n        print(\"Loading environment variables from .env file...\")\n        load_dotenv()\n\n    # Configuration from environment variables\n    CLOUDFLARE_API_TOKEN = os.getenv(\"CLOUDFLARE_API_TOKEN\")\n    CLOUDFLARE_API_EMAIL = os.getenv(\"CLOUDFLARE_API_EMAIL\")\n    CLOUDFLARE_ZONE_ID = os.getenv(\"CLOUDFLARE_ZONE_ID\")\n    CLOUDFLARE_DNS_RECORD_ID = os.getenv(\"CLOUDFLARE_DNS_RECORD_ID\")\n\n    if not CLOUDFLARE_API_TOKEN or not CLOUDFLARE_ZONE_ID or not CLOUDFLARE_DNS_RECORD_ID:\n        print(\"Missing required environment variables.\")\n        sys.exit(1)\n\n    # Fetch the current public IP address\n    current_ip = get_public_ip()\n\n    if current_ip:\n        print(f\"Detected IP\")\n        # Update the Cloudflare DNS record\n        update_cloudflare_record(\n            current_ip,\n            CLOUDFLARE_API_TOKEN,\n            CLOUDFLARE_ZONE_ID,\n            CLOUDFLARE_DNS_RECORD_ID\n        )\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"docker/adguard/","title":"AdGuard Home","text":"<ul> <li>primary dns server for home network</li> </ul> Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  adguard:\n    image: adguard/adguardhome\n    container_name: adguard\n    restart: unless-stopped\n    volumes:\n      - /mnt/store/containers/adguard/work:/opt/adguardhome/work\n      - /mnt/store/containers/adguard/conf:/opt/adguardhome/conf\n    ports:\n      - 53:53/tcp\n      - 53:53/udp\n      - 83:80/tcp\n      - 9444:443/tcp\n      - 9444:443/udp\n      - 3000:3000/tcp\n      - 853:853/tcp\n      - 784:784/udp\n      - 853:853/udp\n      - 8853:8853/udp\n      - 5443:5443/tcp\n      - 5443:5443/udp\n</code></pre>"},{"location":"docker/cloudflared/","title":"Cloudflared","text":"<ul> <li>cloudflare tunnel for kevin</li> <li>environment vars configured in portainer</li> <li>secret held in 1Password</li> </ul> docker-compose.yml<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nname: Cloudflared\nservices:\n  cloudflared:\n    container_name: cloudflared\n    image: cloudflare/cloudflared:latest\n    command: tunnel --no-autoupdate run --token ${CF_TOKEN}\n    restart: unless-stopped\n</code></pre>"},{"location":"docker/homepage/","title":"Homepage","text":"<p>Developed using <code>ghcr.io/gethomepage/homepage</code> docker image available at gethomepage.dev</p> <ul> <li>workflow runs on changes to the configuration of homepage</li> <li>uses a self-hosted github runner to securly copy files to the directory where the container is mapped then restarts the container</li> <li>uses the a dockerproxy for security</li> <li>environment vars configured in portainer</li> <li>secrets held in 1Password and used in GitHub Actions</li> </ul> Workflow<pre><code>name: \"[homepage] Update Config Files\"\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"docker/homepage/config/**\"\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: \"self-hosted\"\n\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v4\n\n      - name: Create SSH Key File\n        run: |\n          echo \"${{ secrets.SSH_TNA_KEY }}\" &gt; ~/.ssh/homepage_key\n          chmod 600 ~/.ssh/homepage_key\n\n      - name: Copy Config Files via SCP\n        run: |\n          scp -i ~/.ssh/homepage_key \\\n              -o StrictHostKeyChecking=no \\\n              -r ./docker/homepage/config/* \\\n              ${{ secrets.SSH_TNA_USERNAME }}@${{ secrets.HOST }}:/mnt/store/containers/homepage/\n\n      - name: Restart Docker Container via SSH\n        run: |\n          ssh -i ~/.ssh/homepage_key \\\n              -o StrictHostKeyChecking=no \\\n              ${{ secrets.SSH_TNA_USERNAME }}@${{ secrets.HOST }} \\\n              \"docker container restart homepage\"\n\n      - name: Remove SSH Key File\n        if: always()\n        run: |\n          rm -f ~/.ssh/homepage_key\n</code></pre> Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  dockerproxy:\n    image: ghcr.io/tecnativa/docker-socket-proxy:latest\n    container_name: dockerproxy\n    environment:\n      - CONTAINERS=1 # Allow access to viewing containers\n      - POST=0 # Disallow any POST operations (effectively read-only)\n    ports:\n      - 127.0.0.1:2375:2375\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only\n    restart: unless-stopped\n\n  homepage:\n    container_name: homepage\n    image: ghcr.io/gethomepage/homepage:latest\n    hostname: homepage\n    volumes:\n      - /mnt/store/containers/homepage:/app/config\n    restart: unless-stopped\n    environment:\n      HOMEPAGE_VAR_NPM_USERNAME: ${HOMEPAGE_VAR_NPM_USERNAME}\n      HOMEPAGE_VAR_NPM_PASSWORD: ${HOMEPAGE_VAR_NPM_PASSWORD}\n      HOMEPAGE_VAR_TRUENAS_KEY: ${HOMEPAGE_VAR_TRUENAS_KEY}\n      HOMEPAGE_VAR_PORTAINER_KEY: ${HOMEPAGE_VAR_PORTAINER_KEY}\n      HOMEPAGE_VAR_ADGUARD_USERNAME: ${HOMEPAGE_VAR_ADGUARD_USERNAME}\n      HOMEPAGE_VAR_ADGUARD_PASSWORD: ${HOMEPAGE_VAR_ADGUARD_PASSWORD}\n      HOMEPAGE_VAR_CLOUDFLARED_ACCOUNTID: ${HOMEPAGE_VAR_CLOUDFLARED_ACCOUNTID}\n      HOMEPAGE_VAR_CLOUDFLARED_TUNNELID: ${HOMEPAGE_VAR_CLOUDFLARED_TUNNELID}\n      HOMEPAGE_VAR_CLOUDFLARED_KEY: ${HOMEPAGE_VAR_CLOUDFLARED_KEY}\n      HOMEPAGE_VAR_WGEASY_PASSWORD: ${HOMEPAGE_VAR_WGEASY_PASSWORD}\n      HOMEPAGE_VAR_SYNO_USERNAME: ${HOMEPAGE_VAR_SYNO_USERNAME}\n      HOMEPAGE_VAR_SYNO_PASSWORD: ${HOMEPAGE_VAR_SYNO_PASSWORD}\n      HOMEPAGE_VAR_WATCHTOWER_KEY: ${HOMEPAGE_VAR_WATCHTOWER_KEY}\n      HOMEPAGE_VAR_UNIFI_KEY: ${HOMEPAGE_VAR_UNIFI_KEY}\n      HOMEPAGE_ALLOWED_HOSTS: homepage.lan\n</code></pre>"},{"location":"docker/nginx-proxy-manager/","title":"Nginx Proxy Manager","text":"<ul> <li>proxy manager so I don't have to remember IPs and port numbers</li> </ul> docker-compose.yml<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  app:\n    container_name: nginx-proxy-manager\n    image: \"jc21/nginx-proxy-manager:2.12.3\"\n    restart: unless-stopped\n    ports:\n      - \"80:80\" # Public HTTP Port\n      - \"443:443\" # Public HTTPS Port\n      - \"81:81\" # Admin Web Port\n    volumes:\n      - /mnt/store/containers/npm/data:/data\n      - /mnt/store/containers/npm/letsencrypt:/etc/letsencrypt\n    healthcheck:\n      test: [\"CMD\", \"/usr/bin/check-health\"]\n      interval: 10s\n      timeout: 3s\n</code></pre>"},{"location":"docker/octorunner/","title":"Octorunner","text":"<p>Upstream</p> <ul> <li>self-hosted runner for LAN targeted workflows</li> <li>environment vars configured in portainer</li> <li>secret held in 1Password</li> </ul> Compose<pre><code>---\nservices:\n  github-runner:\n    container_name: github-runner\n    image: ghcr.io/wesleyem/octorunner:latest\n    environment:\n      REPO: wesleyem/homelab\n      TOKEN: ${RUNNER_TOKEN}\n    restart: unless-stopped\n</code></pre>"},{"location":"docker/overseerr/","title":"Overseerr","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  overseerr:\n    container_name: overseerr\n    image: sctx/overseerr:latest\n    restart: unless-stopped\n    environment:\n      LOG_LEVEL: info\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/overseerr:/app/config\n</code></pre>"},{"location":"docker/plex/","title":"Plex","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  plex:\n    devices:\n      - /dev/dri:/dev/dri\n    container_name: plex\n    image: plexinc/pms-docker:latest\n    restart: unless-stopped\n    environment:\n      PLEX_UID: 950\n      PLEX_GID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n      PLEX_CLAIM: ${PLEX_CLAIM}\n      ADVERTISE_IP: \"http://plex.lan\"\n      HOSTNAME: plex\n    hostname: plex\n    volumes:\n      - /mnt/store/containers/pms/database:/config\n      - /mnt/store/containers/pms/transcode:/transcode\n      - /mnt/store/media:/data\n</code></pre>"},{"location":"docker/portainer/","title":"Portainer","text":"<ul> <li>NOT managed through Portainer but manually via the CLI</li> </ul> Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  portainer-ce:\n    container_name: portainer\n    restart: always\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n      - \"/mnt/store/containers/portainer/data:/data\"\n    image: \"portainer/portainer-ce:latest\"\n</code></pre>"},{"location":"docker/prowlarr/","title":"Prowlarr","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  prowlarr:\n    container_name: prowlarr\n    image: ghcr.io/hotio/prowlarr:latest\n    restart: unless-stopped\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/prowlarr:/config\n</code></pre>"},{"location":"docker/qbittorrent/","title":"qBittorrent","text":"<ul> <li>uses ProtonVPN WireGuard configuration</li> </ul> Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  qbittorrent:\n    container_name: qbittorrent\n    hostname: qbittorrent\n    restart: unless-stopped\n    image: ghcr.io/hotio/qbittorrent:latest\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: Etc/UTC\n      VPN_ENABLED: true\n      VPN_PROVIDER: proton\n      VPN_LAN_NETWORK: 192.168.1.0/24\n      VPN_CONF: wg0\n      PRIVOXY_ENABLED: false\n    volumes:\n      - /mnt/store/containers/qbittorrent:/config\n      - /mnt/store/media:/data\n    cap_add:\n      - NET_ADMIN\n    dns:\n      - 1.1.1.1\n      - 1.0.0.1\n      - 8.8.8.8\n      - 8.8.4.4\n    sysctls:\n      net.ipv4.conf.all.src_valid_mark: 1\n      net.ipv6.conf.all.disable_ipv6: 1\n</code></pre>"},{"location":"docker/radarr/","title":"Radarr","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  radarr:\n    container_name: radarr\n    image: ghcr.io/hotio/radarr:latest\n    restart: unless-stopped\n    logging:\n      driver: json-file\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/radarr:/config\n      - /mnt/store/media:/data\n</code></pre>"},{"location":"docker/readarr/","title":"Readarr","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  readarr:\n    container_name: readarr\n    hostname: readarr\n    image: ghcr.io/hotio/readarr:latest\n    restart: unless-stopped\n    logging:\n      driver: json-file\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/readarr:/config\n      - /mnt/store/media:/data\n</code></pre>"},{"location":"docker/readarr-audio/","title":"Readarr-audio","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  readarr-audio:\n    container_name: readarr-audio\n    hostname: readarr-audio\n    image: ghcr.io/hotio/readarr:latest\n    restart: unless-stopped\n    logging:\n      driver: json-file\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/readarr-audio:/config\n      - /mnt/store/media:/data\n</code></pre>"},{"location":"docker/sonarr/","title":"Sonarr","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  sonarr:\n    container_name: sonarr\n    image: ghcr.io/hotio/sonarr:latest\n    restart: unless-stopped\n    logging:\n      driver: json-file\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/sonarr:/config\n      - /mnt/store/media:/data\n</code></pre>"},{"location":"docker/tautulli/","title":"Tautulli","text":"Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  tautulli:\n    container_name: tautulli\n    image: ghcr.io/hotio/tautulli:latest\n    environment:\n      PUID: 950\n      PGID: 950\n      UMASK: 002\n      TZ: America/Los_Angeles\n    volumes:\n      - /mnt/store/containers/tautulli:/config\n    restart: unless-stopped\n</code></pre>"},{"location":"docker/watchtower/","title":"Watchtower","text":"<ul> <li>keeps container images up to date</li> </ul> docker-compose.yml<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  watchtower:\n    container_name: watchtower\n    hostname: watchtower\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      TZ: America/Los_Angeles\n      WATCHTOWER_CLEANUP: \"true\"\n      WATCHTOWER_SCHEDULE: \"0 0 3 * * *\"\n      WATCHTOWER_ROLLING_RESTART: \"true\"\n      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}\n      WATCHTOWER_HTTP_API_TOKEN: ${WATCHTOWER_HTTP_API_TOKEN}\n      WATCHTOWER_HTTP_API_METRICS: \"true\"\n      WATCHTOWER_NOTIFICATION_REPORT: \"true\"\n      WATCHTOWER_NOTIFICATION_TEMPLATE: |\n        {{- if .Report -}}\n          {{- with .Report -}}\n            {{- if ( or .Updated .Failed ) -}}\n        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n              {{- range .Updated}}\n        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n              {{- end -}}\n              {{- range .Fresh}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}\n              {{- end -}}\n              {{- range .Skipped}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n              {{- end -}}\n              {{- range .Failed}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n              {{- end -}}\n            {{- end -}}\n          {{- end -}}\n        {{- else -}}\n          {{range .Entries -}}{{.Message}}{{\"\\n\"}}{{- end -}}\n        {{- end -}}\n    ports:\n      - 8082:8080\n    restart: unless-stopped\n</code></pre>"},{"location":"docker/wg-easy/","title":"WireGuard","text":"<ul> <li>environment vars configured in portainer</li> <li>secrets held in 1Password</li> </ul> Compose<pre><code>---\nnetworks:\n  default:\n    external: true\n    name: proxynet\n\nservices:\n  wg-easy:\n    container_name: wg-easy\n    image: ghcr.io/wg-easy/wg-easy\n    restart: unless-stopped\n    volumes:\n      - /mnt/store/containers/wg-easy:/etc/wireguard\n    ports:\n      - 51820:51820/udp\n      - 51821:51821/tcp\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      net.ipv4.conf.all.src_valid_mark: 1\n      net.ipv4.ip_forward: 1\n    environment:\n      LANG: en\n      WG_HOST: ${WG_EASY_SERVER_IP}\n      PASSWORD_HASH: ${WG_EASY_PASSWORD_HASH}\n      PORT: 51821\n      WG_PORT: 51820\n      WG_ALLOWED_IPS: 10.0.0.0/8\n      WG_DEFAULT_DNS: 10.100.0.1\n</code></pre>"}]}